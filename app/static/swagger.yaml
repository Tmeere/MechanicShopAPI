swagger: "2.0"
info:
  title: "MechanicShop API"
  description: "This is an API to manage a Mechanic Shop"
  version: "1.0.0"
host: "mechanicshopapi.onrender.com" 
schemes:
  - "https"
consumes:
  - "application/json"
produces:
  - "application/json"
paths:
  /customers/login:
    post:
      tags:
        - Customers
      summary: "Login endpoint (generates token)"
      description: "Validates customer credentials, generates and returns a customer-specific token."
      parameters:
        - in: "body"
          name: "body"
          description: "Login Credentials"
          required: true
          schema:
            $ref: "#/definitions/LoginCredentials"
      responses:
        200:
          description: "Login successful"
          schema:
            $ref: "#/definitions/LoginResponse"

  /customers:
    post:
      tags:
        - Customers
      summary: "Create Customer"
      description: "Create a new customer."
      parameters:
        - in: "body"
          name: "body"
          description: "Customer details"
          required: true
          schema:
            $ref: "#/definitions/CreateCustomerPayload"
      responses:
        201:
          description: "Customer created successfully"
          schema:
            $ref: "#/definitions/Customer"
    get:
      tags:
        - Customers
      summary: "Get Customers"
      description: "Retrieve a list of customers with optional pagination."
      parameters:
        - name: "page"
          in: "query"
          type: "integer"
          description: "Page number"
        - name: "per_page"
          in: "query"
          type: "integer"
          description: "Number of customers per page"
      responses:
        200:
          description: "List of customers"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Customer"

    put:
      tags:
        - Customers
      summary: "Update Customer"
      description: "Updates the authenticated customer's information. Requires token authentication."
      security:
        - bearerAuth: [] # Assuming token-based authentication
      parameters:
        - in: "body"
          name: "body"
          description: "Customer details to update"
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                description: "The customer's name."
                example: "John Doe"
              email:
                type: string
                description: "The customer's email address."
                example: "john.doe@example.com"
              phone:
                type: string
                description: "The customer's phone number."
                example: "+1234567890"
              password:
                type: string
                description: "The customer's password."
                example: "securepassword123"
            required:
              - email
              - phone
      responses:
        200:
          description: "Customer updated successfully."
          schema:
            type: object
            properties:
              id:
                type: integer
                description: "The customer's ID."
                example: 1
              name:
                type: string
                description: "The customer's name."
                example: "John Doe"
              email:
                type: string
                description: "The customer's email address."
                example: "john.doe@example.com"
              phone:
                type: string
                description: "The customer's phone number."
                example: "+1234567890"
        400:
          description: "Validation error or email/phone conflict."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Email or phone number already in use."
        404:
          description: "Customer not found."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Invalid customer ID."
        401:
          description: "Unauthorized access."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthorized."

    delete:
      tags:
        - Customers
      summary: "Endpoint to delete a customer"
      description: "Deletes a customer. Requires token authentication, and the customer must be logged in to delete their account."
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successfully deleted the customer"
          schema:
            $ref: "#/definitions/DeleteCustomerResponse"
          examples:
            application/json:
              message: "Successfully deleted customer <customer_id>."
        404:
          description: "Invalid customer ID"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid customer ID"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"

  /customers/{customer_id}:
    get:
      tags:
        - Customers
      summary: "Get Customer by ID"
      description: "Retrieve a customer by their ID."
      parameters:
        - name: "customer_id"
          in: "path"
          required: true
          type: "integer"
          description: "ID of the customer"
      responses:
        200:
          description: "Customer details"
          schema:
            $ref: "#/definitions/Customer"
        404:
          description: "Customer not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Customer not found"

  /service_ticket:
    post:
      tags:
        - Tickets
      summary: "Create a Service Ticket"
      description: "Create a new service ticket for a customer."
      parameters:
        - in: "body"
          name: "body"
          description: "Service ticket details"
          required: true
          schema:
            $ref: "#/definitions/ServiceTicketPayload"
      responses:
        201:
          description: "Service ticket created successfully"
          schema:
            $ref: "#/definitions/ServiceTicket"
    get:
      tags:
        - Tickets
      summary: "Get All Tickets"
      description: "Retrieve all service tickets."
      responses:
        200:
          description: "List of service tickets"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ServiceTicket"

  /service_ticket/ticket-update/{ticket_id}:
    put:
      tags:
        - Tickets
      summary: "Update Ticket Status"
      description: "Update the status of a service ticket."
      parameters:
        - name: "ticket_id"
          in: "path"
          required: true
          type: "integer"
          description: "ID of the service ticket"
        - in: "body"
          name: "body"
          description: "Updated ticket status"
          required: true
          schema:
            $ref: "#/definitions/UpdateTicketStatusPayload"
      responses:
        200:
          description: "Ticket status updated successfully"
          schema:
            $ref: "#/definitions/ServiceTicket"

  /mechanics:
    get:
      tags:
        - Mechanics
      summary: "Get Mechanics by Pagination"
      description: "Retrieve a list of mechanics with optional pagination."
      parameters:
        - name: "page"
          in: "query"
          type: "integer"
          description: "Page number"
        - name: "per_page"
          in: "query"
          type: "integer"
          description: "Number of mechanics per page"
      responses:
        200:
          description: "List of mechanics"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Mechanic"
    post:
      tags:
        - Mechanics
      summary: "Create Mechanic"
      description: "Create a new mechanic."
      parameters:
        - in: "body"
          name: "body"
          description: "Mechanic details"
          required: true
          schema:
            $ref: "#/definitions/CreateMechanicPayload"
      responses:
        201:
          description: "Mechanic created successfully"
          schema:
            $ref: "#/definitions/Mechanic"
        400:
          description: "Duplicate mechanic error"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "A mechanic with this name or email already exists."

  /inventory/items:
    post:
      tags:
        - Inventory
      summary: "Add to Inventory"
      description: "Add a new item to the inventory."
      parameters:
        - in: "body"
          name: "body"
          description: "Inventory item details"
          required: true
          schema:
            $ref: "#/definitions/InventoryItemPayload"
      responses:
        201:
          description: "Item added to inventory successfully"
          schema:
            $ref: "#/definitions/InventoryItem"
    get:
      tags:
        - Inventory
      summary: "Get Parts with Pagination"
      description: "Retrieve inventory items with optional filters and pagination."
      parameters:
        - name: "min_price"
          in: "query"
          type: "number"
          description: "Minimum price filter"
        - name: "max_price"
          in: "query"
          type: "number"
          description: "Maximum price filter"
        - name: "unassignedParts"
          in: "query"
          type: "boolean"
          description: "Filter for unassigned parts"
        - name: "page"
          in: "query"
          type: "integer"
          description: "Page number"
        - name: "per_page"
          in: "query"
          type: "integer"
          description: "Number of items per page"
      responses:
        200:
          description: "List of inventory items"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/InventoryItem"

  /inventory/items/{item_id}:
    delete:
      tags:
        - Inventory
      summary: "Remove Inventory"
      description: "Remove an item from the inventory by its ID."
      parameters:
        - name: "item_id"
          in: "path"
          required: true
          type: "integer"
          description: "ID of the inventory item"
      responses:
        200:
          description: "Item removed from inventory successfully"
    put:
      tags:
        - Inventory
      summary: "Update Part"
      description: "Update the details of an inventory item."
      parameters:
        - name: "item_id"
          in: "path"
          required: true
          type: "integer"
          description: "ID of the inventory item"
        - in: "body"
          name: "body"
          description: "Updated inventory item details"
          required: true
          schema:
            $ref: "#/definitions/InventoryItemPayload"
      responses:
        200:
          description: "Inventory item updated successfully"
          schema:
            $ref: "#/definitions/InventoryItem"

  /inventory/assign-item/{item_id}:
    post:
      tags:
        - Inventory
      summary: "Add Parts To Service"
      description: "Assign parts from inventory to a service ticket."
      parameters:
        - name: "item_id"
          in: "path"
          required: true
          type: "integer"
          description: "ID of the inventory item"
        - in: "body"
          name: "body"
          description: "Details of the assignment"
          required: true
          schema:
            $ref: "#/definitions/AssignItemPayload"
      responses:
        200:
          description: "Parts assigned to service ticket successfully"

  /mechanics/login:
    post:
      tags:
        - Mechanics
      summary: "Mechanic Login"
      description: "Allows a mechanic to log in using their email and name."
      parameters:
        - in: "body"
          name: "body"
          description: "Mechanic login credentials"
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                description: "The mechanic's email."
                example: "mike.johnson@example.com"
              name:
                type: string
                description: "The mechanic's name."
                example: "Mike Johnson"
      responses:
        200:
          description: "Login successful"
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "Successfully Logged In"
              auth_token:
                type: string
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        400:
          description: "Invalid payload"
        404:
          description: "Mechanic not found"
        401:
          description: "Invalid email or name"

  /mechanics/remove-ticket/{ticket_id}:
    delete:
      tags:
        - Mechanics
      summary: "Remove Ticket"
      description: "Allows a mechanic to remove a service ticket assigned to them."
      parameters:
        - name: "ticket_id"
          in: "path"
          required: true
          type: "integer"
          description: "ID of the service ticket to remove"
      responses:
        200:
          description: "Ticket removed successfully"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Ticket with ID 123 successfully deleted"
        404:
          description: "Ticket not found or unauthorized"
        401:
          description: "Unauthorized access"

  /mechanics/{mechanic_id}:
    get:
      tags:
        - Mechanics
      summary: "Get Mechanic by ID"
      description: "Retrieve a mechanic's details by their ID."
      parameters:
        - name: "mechanic_id"
          in: "path"
          required: true
          type: "integer"
          description: "ID of the mechanic"
      responses:
        200:
          description: "Mechanic details"
          schema:
            $ref: "#/definitions/Mechanic"
        404:
          description: "Mechanic not found"

    delete:
      tags:
        - Mechanics
      summary: "Delete Mechanic"
      description: "Delete a mechanic by their ID."
      parameters:
        - name: "mechanic_id"
          in: "path"
          required: true
          type: "integer"
          description: "ID of the mechanic to delete"
      responses:
        200:
          description: "Mechanic deleted successfully"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Mechanic deleted successfully"
        404:
          description: "Mechanic not found"

    put:
      tags:
        - Mechanics
      summary: "Update Mechanic"
      description: "Update a mechanic's details by their ID."
      parameters:
        - name: "mechanic_id"
          in: "path"
          required: true
          type: "integer"
          description: "ID of the mechanic to update"
        - in: "body"
          name: "body"
          description: "Updated mechanic details"
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                description: "The mechanic's name."
                example: "Mike Johnson"
              salary:
                type: number
                description: "The mechanic's salary."
                example: 60000.00
      responses:
        200:
          description: "Mechanic updated successfully"
          schema:
            $ref: "#/definitions/Mechanic"
        400:
          description: "Validation error"
        404:
          description: "Mechanic not found"

  /mechanics/most-tickets:
    get:
      tags:
        - Mechanics
      summary: "Get Mechanic with Most Tickets"
      description: "Retrieve the mechanic with the most assigned service tickets."
      responses:
        200:
          description: "Mechanic with the most tickets"
          schema:
            $ref: "#/definitions/Mechanic"

  /mechanics/search:
    get:
      tags:
        - Mechanics
      summary: "Search Mechanics"
      description: "Search for mechanics by name or salary filters."
      parameters:
        - name: "name"
          in: "query"
          type: "string"
          description: "Name of the mechanic"
        - name: "salary"
          in: "query"
          type: "number"
          description: "Salary filter"
        - name: "below"
          in: "query"
          type: "boolean"
          description: "Filter for salaries below the specified amount"
      responses:
        200:
          description: "List of mechanics matching the search criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Mechanic"

definitions:
  LoginCredentials:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
    required:
      - email
      - password
    example:
      email: "Tom@Tom.com"
      password: "1234"

  LoginResponse:
    type: "object"
    properties:
      token:
        type: "string"
      message:
        type: "string"
      status:
        type: "string"
    example:
      token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      message: "Login successful"
      status: "success"

  Customer:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
    example:
      id: 1
      name: "John Doe"
      email: "johndoe@example.com"
      phone: "123-456-7890"

  CreateCustomerPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"
    required:
      - name
      - email
      - phone
      - password
    example:
      name: "Tom Tom"
      email: "Tom@Tom.com"
      phone: "987-654-3210"
      password: "1234"

  ServiceTicket:
    type: "object"
    properties:
      id:
        type: "integer"
      vin:
        type: "string"
      service_date:
        type: "string"
        format: "date"
      service_description:
        type: "string"
      customer_id:
        type: "integer"
      mechanic_ids:
        type: "array"
        items:
          type: "integer"
    example:
      id: 101
      vin: "1HGCM82633A123456"
      service_date: "2025-04-22"
      service_description: "Oil change and tire rotation"
      customer_id: 1
      mechanic_ids: [2, 3]

  ServiceTicketPayload:
    type: "object"
    properties:
      vin:
        type: "string"
      service_date:
        type: "string"
        format: "date"
      service_description:
        type: "string"
      customer_id:
        type: "integer"
      mechanic_ids:
        type: "array"
        items:
          type: "integer"
    required:
      - vin
      - service_date
      - service_description
      - customer_id
      - mechanic_ids
    example:
      vin: "1HGCM82633A123456"
      service_date: "2025-04-22"
      service_description: "Brake pad replacement"
      customer_id: 1
      mechanic_ids: [2]

  UpdateTicketStatusPayload:
    type: "object"
    properties:
      status:
        type: "string"
    required:
      - status
    example:
      status: "Completed"

  Mechanic:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      salary:
        type: "number"
    example:
      id: 2
      name: "Mike Johnson"
      salary: 55000.00

  CreateMechanicPayload:
    type: "object"
    properties:
      name:
        type: "string"
      salary:
        type: "number"
    required:
      - name
      - salary
    example:
      name: "Sarah Connor"
      salary: 60000.00

  InventoryItem:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      price:
        type: "number"
    example:
      id: 10
      name: "Brake Pads"
      price: 75.50

  InventoryItemPayload:
    type: "object"
    properties:
      name:
        type: "string"
      price:
        type: "number"
    required:
      - name
      - price
    example:
      name: "Air Filter"
      price: 25.00

  AssignItemPayload:
    type: "object"
    properties:
      service_ticket_id:
        type: "integer"
      quantity:
        type: "integer"
    required:
      - service_ticket_id
      - quantity
    example:
      service_ticket_id: 101
      quantity: 2

  DeleteCustomerResponse:
    type: object
    properties:
      message:
        type: string
        example: "Successfully deleted customer <customer_id>."

securityDefinitions:
  bearerAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"
components:
  schemas:
    UpdateCustomerPayload:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@example.com
        phone:
          type: string
          example: "+1234567890"
        password:
          type: string
          example: "newpassword123"
    Customer:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@example.com
        phone:
          type: string
          example: "+1234567890"
